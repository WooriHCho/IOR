#include <opencv2/opencv.hpp>
using namespace cv;
using namespace std;

void load_cascade(CascadeClassifier& cascade, string fname)
{
	String path = "/home/pi/opencv/opencv-3.2.0/data/haarcascades/";
	String full_name = path + fname;

	CV_Assert(cascade.load(full_name));
}

Mat preprocessing(Mat image)
{
	Mat gray;
	cvtColor(image, gray, CV_BGR2GRAY);
	equalizeHist(gray, gray);

	return gray;
}

Point2d calc_center(Rect obj)
{
	Point2d c = (Point2d)obj.size()/2.0;
	Point2d center = (Point2d)obj.tl() +c;
	return center;

}

int main()
{
	CascadeClassifier face_cascade;
	load_cascade(face_cascade, "haarcascade_frontalface_alt2.xml");
	
	Mat image = imread("images.jpg", IMREAD_COLOR);
	CV_Assert(image.data);
	Mat gray = preprocessing(image);
	
	vector<Rect> faces;
	face_cascade.detectMultiScale(gray, faces, 1.1, 2, 0, Size(100,100));
	
	rectangle(image, faces[0], Scalar(255, 0, 0), 2);
	imshow("image", image);
	waitKey(0);
	return 0;
}